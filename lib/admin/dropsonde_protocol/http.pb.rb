### Generated by rprotoc. DO NOT EDIT!
### <proto file: http.proto>
# package events;
# 
# option java_package = "org.cloudfoundry.dropsonde.events";
# option java_outer_classname = "HttpFactory";
# 
# import "uuid.proto";
# 
# /// Type of peer handling request.
# enum PeerType {
#     Client = 1; /// Request is made by this process.
#     Server = 2; /// Request is received by this process.
# }
# 
# /// HTTP method.
# enum Method {
#     GET = 1;
#     POST = 2;
#     PUT = 3;
#     DELETE = 4;
#     HEAD = 5;
# 
#     ACL = 6;
#     BASELINE_CONTROL = 7;
#     BIND = 8;
#     CHECKIN = 9;
#     CHECKOUT = 10;
#     CONNECT = 11;
#     COPY = 12;
#     DEBUG = 13;
#     LABEL = 14;
#     LINK = 15;
#     LOCK = 16;
#     MERGE = 17;
#     MKACTIVITY = 18;
#     MKCALENDAR = 19;
#     MKCOL = 20;
#     MKREDIRECTREF = 21;
#     MKWORKSPACE = 22;
#     MOVE = 23;
#     OPTIONS = 24;
#     ORDERPATCH = 25;
#     PATCH = 26;
#     PRI = 27;
#     PROPFIND = 28;
#     PROPPATCH = 29;
#     REBIND = 30;
#     REPORT = 31;
#     SEARCH = 32;
#     SHOWMETHOD = 33;
#     SPACEJUMP = 34;
#     TEXTSEARCH = 35;
#     TRACE = 36;
#     TRACK = 37;
#     UNBIND = 38;
#     UNCHECKOUT = 39;
#     UNLINK = 40;
#     UNLOCK = 41;
#     UPDATE = 42;
#     UPDATEREDIRECTREF = 43;
#     VERSION_CONTROL = 44;
# }
# 
# /// An HttpStart event is emitted when a client sends a request (or immediately when a server receives the request).
# message HttpStart {
#     required int64 timestamp = 1;      /// UNIX timestamp (in nanoseconds) when the request was sent (by a client) or received (by a server).
#     required UUID requestId = 2;       /// ID for tracking lifecycle of request.
#     required PeerType peerType = 3;    /// Role of the emitting process in the request cycle.
#     required Method method = 4;        /// Method of the request.
#     required string uri = 5;           /// Destination of the request.
#     required string remoteAddress = 6; /// Remote address of the request. (For a server, this should be the origin of the request.)
#     required string userAgent = 7;     /// Contents of the UserAgent header on the request.
# 
#     optional UUID parentRequestId = 8; /// If this request was made in order to service an incoming request, this field should track the ID of the parent.
#     optional UUID applicationId = 9;   /// If this request was made in relation to an appliciation, this field should track that application's ID.
#     optional int32 instanceIndex = 10; /// Index of the application instance.
#     optional string instanceId = 11;   /// ID of the application instance.
# }
# 
# /// An HttpStop event is emitted when a client receives a response to its request (or when a server completes its handling and returns a response).
# message HttpStop {
#     required int64 timestamp = 1;      /// UNIX timestamp (in nanoseconds) when the request was received.
#     required string uri = 2;           /// URI of request.
#     required UUID requestId = 3;       /// ID for tracking lifecycle of request. Should match requestId of a HttpStart event.
#     required PeerType peerType = 4;    /// Role of the emitting process in the request cycle.
#     required int32 statusCode = 5;     /// Status code returned with the response to the request.
#     required int64 contentLength = 6;  /// Length of response (bytes).
# 
#     optional UUID applicationId = 7;   /// If this request was made in relation to an appliciation, this field should track that application's ID.
# }
# 
# /// An HttpStartStop event represents the whole lifecycle of an HTTP request.
# message HttpStartStop {
#     required int64 startTimestamp = 1;  /// UNIX timestamp (in nanoseconds) when the request was sent (by a client) or received (by a server).
#     required int64 stopTimestamp = 2;   /// UNIX timestamp (in nanoseconds) when the request was received.
# 
#     required UUID requestId = 3;        /// ID for tracking lifecycle of request. Should match requestId of a HttpStart event.
#     required PeerType peerType = 4;     /// Role of the emitting process in the request cycle.
#     required Method method = 5;         /// Method of the request.
#     required string uri = 6;            /// Destination of the request.
#     required string remoteAddress = 7;  /// Remote address of the request. (For a server, this should be the origin of the request.)
#     required string userAgent = 8;      /// Contents of the UserAgent header on the request.
# 
#     required int32 statusCode = 9;      /// Status code returned with the response to the request.
#     required int64 contentLength = 10;  /// Length of response (bytes).
# 
#     /// 11 used to be ParentRequestID which has been deprecated.
# 
#     optional UUID applicationId = 12;   /// If this request was made in relation to an appliciation, this field should track that application's ID.
#     optional int32 instanceIndex = 13;  /// Index of the application instance.
#     optional string instanceId = 14;    /// ID of the application instance.
#     repeated string forwarded = 15;     /// This contains http forwarded-for [x-forwarded-for] header from the request.
# }

require 'protobuf/message/message'
require 'protobuf/message/enum'
require 'protobuf/message/service'
require 'protobuf/message/extend'

module Events
  ::Protobuf::OPTIONS[:"java_package"] = "org.cloudfoundry.dropsonde.events"
  ::Protobuf::OPTIONS[:"java_outer_classname"] = "HttpFactory"
  require 'uuid.pb'
  class PeerType < ::Protobuf::Enum
    defined_in __FILE__
    Client = value(:Client, 1)
    Server = value(:Server, 2)
  end
  class Method < ::Protobuf::Enum
    defined_in __FILE__
    GET = value(:GET, 1)
    POST = value(:POST, 2)
    PUT = value(:PUT, 3)
    DELETE = value(:DELETE, 4)
    HEAD = value(:HEAD, 5)
    ACL = value(:ACL, 6)
    BASELINE_CONTROL = value(:BASELINE_CONTROL, 7)
    BIND = value(:BIND, 8)
    CHECKIN = value(:CHECKIN, 9)
    CHECKOUT = value(:CHECKOUT, 10)
    CONNECT = value(:CONNECT, 11)
    COPY = value(:COPY, 12)
    DEBUG = value(:DEBUG, 13)
    LABEL = value(:LABEL, 14)
    LINK = value(:LINK, 15)
    LOCK = value(:LOCK, 16)
    MERGE = value(:MERGE, 17)
    MKACTIVITY = value(:MKACTIVITY, 18)
    MKCALENDAR = value(:MKCALENDAR, 19)
    MKCOL = value(:MKCOL, 20)
    MKREDIRECTREF = value(:MKREDIRECTREF, 21)
    MKWORKSPACE = value(:MKWORKSPACE, 22)
    MOVE = value(:MOVE, 23)
    OPTIONS = value(:OPTIONS, 24)
    ORDERPATCH = value(:ORDERPATCH, 25)
    PATCH = value(:PATCH, 26)
    PRI = value(:PRI, 27)
    PROPFIND = value(:PROPFIND, 28)
    PROPPATCH = value(:PROPPATCH, 29)
    REBIND = value(:REBIND, 30)
    REPORT = value(:REPORT, 31)
    SEARCH = value(:SEARCH, 32)
    SHOWMETHOD = value(:SHOWMETHOD, 33)
    SPACEJUMP = value(:SPACEJUMP, 34)
    TEXTSEARCH = value(:TEXTSEARCH, 35)
    TRACE = value(:TRACE, 36)
    TRACK = value(:TRACK, 37)
    UNBIND = value(:UNBIND, 38)
    UNCHECKOUT = value(:UNCHECKOUT, 39)
    UNLINK = value(:UNLINK, 40)
    UNLOCK = value(:UNLOCK, 41)
    UPDATE = value(:UPDATE, 42)
    UPDATEREDIRECTREF = value(:UPDATEREDIRECTREF, 43)
    VERSION_CONTROL = value(:VERSION_CONTROL, 44)
  end
  class HttpStart < ::Protobuf::Message
    defined_in __FILE__
    required :int64, :timestamp, 1
    required :UUID, :requestId, 2
    required :PeerType, :peerType, 3
    required :Method, :method, 4
    required :string, :uri, 5
    required :string, :remoteAddress, 6
    required :string, :userAgent, 7
    optional :UUID, :parentRequestId, 8
    optional :UUID, :applicationId, 9
    optional :int32, :instanceIndex, 10
    optional :string, :instanceId, 11
  end
  class HttpStop < ::Protobuf::Message
    defined_in __FILE__
    required :int64, :timestamp, 1
    required :string, :uri, 2
    required :UUID, :requestId, 3
    required :PeerType, :peerType, 4
    required :int32, :statusCode, 5
    required :int64, :contentLength, 6
    optional :UUID, :applicationId, 7
  end
  class HttpStartStop < ::Protobuf::Message
    defined_in __FILE__
    required :int64, :startTimestamp, 1
    required :int64, :stopTimestamp, 2
    required :UUID, :requestId, 3
    required :PeerType, :peerType, 4
    required :Method, :method, 5
    required :string, :uri, 6
    required :string, :remoteAddress, 7
    required :string, :userAgent, 8
    required :int32, :statusCode, 9
    required :int64, :contentLength, 10
    optional :UUID, :applicationId, 12
    optional :int32, :instanceIndex, 13
    optional :string, :instanceId, 14
    repeated :string, :forwarded, 15
  end
end